{"version":3,"file":"worker.js","mappings":";;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;ACPA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AArDA;;;;;;;;;;;;;;ACHA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAZA;;;;;;;;;;;;;;ACHA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAdA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvBA;AAEA;AACA;AACA","sources":["webpack://cdn/./src/config.ts","webpack://cdn/./src/fetch/image.ts","webpack://cdn/./src/handler.ts","webpack://cdn/./src/jsonError.ts","webpack://cdn/webpack/bootstrap","webpack://cdn/./src/index.ts"],"sourcesContent":["const config = {\n    userAgent:\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.91 Safari/537.36',\n    acceptHeader:\n        'video/mp4, video/webm;q=0.9, image/jpeg, image/png, image/gif;q=0.8, application/octet-stream;q=0.7, */*;q=0.6, text/html;q=0.5',\n}\n\nexport default config\n","import { jsonError } from '../jsonError'\nimport config from '../config'\n\nexport async function image(uri: URL, event: FetchEvent): Promise<Response> {\n    let id = uri.pathname.substring(1)\n\n    let url = `https://i.imgur.com/${id}`\n    const cache = caches.default\n\n    const options = {\n        headers: {\n            'User-Agent': config.userAgent,\n            Accept: config.acceptHeader,\n        },\n    }\n\n    if (id.includes('.gifv')) {\n        id = id.replace('.gifv', '.mp4')\n        return Response.redirect(`${uri.origin}/${id}`)\n    }\n\n    let response = await cache.match(url)\n\n    if (!response) {\n        const imageResponse = await fetch(url, options)\n\n        const headers = {\n            'cache-control': 'public, max-age=31536000',\n        }\n\n        const cloned = imageResponse.clone()\n\n        response = new Response(cloned.body, {\n            ...cloned,\n            headers,\n        })\n\n        const type = imageResponse.headers.get('content-type')\n\n        if (\n            type &&\n            imageResponse.status >= 200 &&\n            imageResponse.status <= 300 &&\n            imageResponse.redirected == false // Imgur redirect on 404 error\n        ) {\n            event.waitUntil(cache.put(url, imageResponse.clone()))\n        } else {\n            return jsonError('Not found', 404)\n        }\n    }\n\n    if (response?.url?.includes('.mp4')) {\n        response.headers.set('content-type', 'video/mp4')\n    }\n\n    return response\n}\n","import { image } from './fetch/image'\nimport { jsonError } from './jsonError'\n\nexport async function handleRequest(event: FetchEvent): Promise<Response> {\n    const { request } = event\n    const uri = new URL(request.url)\n    const path = uri.pathname.substring(1)\n\n    try {\n        if (!path) return jsonError('No Filename', 406)\n\n        return await image(uri, event)\n    } catch (err: any) {\n        return jsonError(err.toString(), 500)\n    }\n}\n","export function jsonError(error: string, status = 400): Response {\n    return new Response(\n        JSON.stringify({\n            error,\n            status,\n            success: false,\n        }),\n        {\n            status,\n            headers: {\n                'content-type': 'application/json',\n            },\n        }\n    )\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { handleRequest } from './handler'\n\naddEventListener('fetch', (event) => {\n    event.respondWith(handleRequest(event))\n})\n"],"names":[],"sourceRoot":""}